# DEFAULT /PREDETERMINADO si no se especifica entorno
spring:
  application:
    name: AuthManager
  banner:
    location: JPD.txt
  datasource:
    url: ${DB_URL} 
    username: ${DB_USER}  
    password: ${DB_PSSWRD}
    driver-class-name: org.postgresql.Driver
  jpa:
    properties:
      generate-ddl: true
      hibernate:
        "[format_sql]": true
        "[show_sql]": true
        "[default_schema]": pctaller

server:
  port: 6666
logging:
  level:
   "[org.springframework.web]": INFO
   "[org.springframework.security]": DEBUG

app:
  datasources:
    docker:
      datasource:
        jdbcUrl: ${DB_URL}
        username: ${DB_USER}
        password: ${DB_PSSWRD}
        driverClassName: org.postgresql.Driver
      jpa:
        properties:
          hibernate:
            "[format_sql]": true
            "[show_sql]": true
            "[default_schema]": pctaller

# This is a custom setting for Jwt that I need in my app but I want to keep secured
myconfig:
  security:
    jwt:
      SECRET_KEY: ${SECRET_KEY}
      expirationMinutes: 15 #minutes
      TEST_TOKEN: ${TEST_TOKEN}
      #refresh-token:
      #  expiration: 60 # minutes (not yet implemented)
      
eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
     defaultZone: http://${EUREKA_INSTANCE_HOSTNAME}:${EUREKA_PORT}/eureka
     
resilience4j:
  bulkhead:
    instances:
      getAllBH:
        max-concurrent-calls: 2
        max-wait-duration: 0  # 0 means donâ€™t wait for anything, show response immediately
  ratelimiter:
    instances:
      loginRL:
        limit-for-period: 2 # allows this number of request
        limit-refresh-period: 5s # in this timeframe
        timeout-duration: 0 #after the period there is no additional time to accept more requests
  retry:
    instances:
      loginRT:
        max-attempts: 4
        wait-duration: 1s #time between retries
        retry-exceptions:
          - java.util.NoSuchElementException # retry if username was not found, maybe we are experiencing eventual consistency and just need to wait and retry
  circuitbreaker:
    instances:
      loginCB:
        failureRateThreshold: 80 # % of failed executions to go to close state
        slidingWindowSize: 10 # timeframe to reset % failure threshold
        slidingWindowType: COUNT_BASED # it can also be TIME_BASED.
        minimumNumberOfCalls: 5 # minimum number of calls to start calculating % for threshold
        automaticTransitionFromOpenToHalfOpenEnabled: true # false would imply that it is left open after failures 
        permittedNumberOfCallsInHalfOpenState: 5 # number of request to evaluate threshold again (whithin open-close), if for example, 5 at least 4 should fail to go again to "open"
        # waitDurationInSecondsOpenState: 1s # once the threshold is not reached, this is the time to switch to closed again.
logbook:
  format:
    style: JSON # Logbook outputs requests/responses in JSON Format
  include:
    headers: true
    body: true
    path:
      - /api/v1/noauth/**
      - /otra/url
  exclude:
    -api/v1/admin/**
  obfuscate:
    headers:
      - Authorization
      - X-auth-token
      - X-security-token
      - X-secret
    parameters:
      - password
      - access_token